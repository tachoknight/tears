#ifndef AUTHEDPUBLICKEYENCRYPTION_HPP
#define AUTHEDPUBLICKEYENCRYPTION_HPP

#include <tears/util.hpp>
#include <tears.hpp>

/** @defgroup apkenc Authenticated Public Key Encryption
 * @brief Methods used for Authenticated Public Key Encryption
 * @details Authenticated Public Key Encryption is a
 * form of [Public Key](https://en.wikipedia.org/wiki/Public-key_cryptography)
 * encryption that has the benefits of
 * [Authenticated Encryption](https://en.wikipedia.org/wiki/Authenticated_encryption).
 * Which means that it provides:
 * - confidentiality
 * - integrity
 * - authentication
 *
 * of the encrypted data.
 *
 * This group has boxBeforeNM() and AfterNM methods for use when sending and receiveing
 * multiple messages with the same sender and  receiver.
 **/
namespace Tears
{

class TEARS_EXPORT PublicKeyCrypto
{
 public:
    PublicKeyCrypto();
    /**
     * @brief Encrypts data
     * @ingroup apkenc
     * @param data The data to be encrypted
     * @param nonce A unique nonce
     * @param publicKey The public key of the receiver
     * @param secretKey The secret key of the sender
     * @return Empty array on failure otherwise the encrypted data
     */
    static QByteArray box(const QByteArray &data, const QByteArray &nonce, const QByteArray &publicKey, const QByteArray &secretKey);

    /**
     * @brief Encrypts data
     * @ingroup apkenc
     * @param data The data to be encrypted
     * @param nonce A unique nonce
     * @param key The combined public and secret key, see boxBeforeNM()
     * @return Empty array on failure
     */
    static QByteArray boxAfterNM(const QByteArray &data, const QByteArray &nonce, const QByteArray &key);

    /**
     * @brief Combines the private and public key.
     * @details The combined key can be reused for subsequent messages using AfterNM methods.
     * @ingroup apkenc
     * @param publicKey The public key of the receiver
     * @param secretKey The secret key of the sender
     * @return The combined key
     */
    static QByteArray boxBeforeNM(const QByteArray &publicKey, const QByteArray &secretKey);

    /**
     * @brief Decrypts the encrypted data
     * @ingroup apkenc
     * @param encryptedData The data encrypted by box() or boxAfterNM()
     * @param nonce The nonce used to encrypt the data.
     * @param publicKey The public key of the receiver
     * @param secretKey The secret key of the sender
     * @return
     */
    static QByteArray boxOpen(const QByteArray &encryptedData, const QByteArray nonce, const QByteArray &publicKey, const QByteArray &secretKey);

    /**
     * @brief boxOpen
     * @ingroup apkenc
     * @param cipherData
     * @param nonce
     * @return
     */
    static QByteArray boxOpenAfterNM(const QByteArray &cipherData, const QByteArray &nonce, const QByteArray &key);

    /**
     * @brief Generates a public / secret keypair
     * @ingroup apkenc
     * @param publicKey
     * @param secretKey Will be locked using Util::lockMemory
     * @param flag If set to anything but the default CryptoFlags::FailOnLockFailure the function will disregard failure.
     * @return TRUE if successful
     */
    static bool boxKeyPair(QByteArray &publicKey, QByteArray &secretKey, CryptoFlags flag = FailOnLockFailure);

    /**
     * @brief Gets a nonce for use in box()
     * @ingroup apkenc
     * @return A random nonce with a size of \a Tears::PublicKeyCrypto::boxNonceBytes
     */
    static QByteArray boxNonce();

    /****************************************************
     *
     *      CONSTANTS
     *
     ****************************************************/

    /**
     * @brief The size of the key generated by boxBeforeNM().
     * @ingroup apkenc
     */
    static const quint32 boxBeforeNMBytes = crypto_box_BEFORENMBYTES;

    /**
     * @internal
     * @brief The amount of bytes sodium reserves at the start of ciphertext.
     * @ingroup apkenc
     */
    static const quint32 boxBoxZeroBytes = crypto_box_BOXZEROBYTES;

    /**
     * @brief The size of the public key generated by boxKeyPair().
     * @ingroup apkenc
     */
    static const quint32 boxPublicKeyBytes = crypto_box_PUBLICKEYBYTES;

    /**
     * @brief The size of the secret key generated by boxKeyPair().
     * @ingroup apkenc
     */
    static const quint32 boxSecretKeyBytes = crypto_box_SECRETKEYBYTES;

    /**
     * @brief The size of a nonce generated by boxNonce().
     * @ingroup apkenc
     */
    static const quint32 boxNonceBytes = crypto_box_NONCEBYTES;

    /**
     * @brief The name of the encryption method used internally.
     * @ingroup apkenc
     */
    static const QString boxPrimitive;

    /**
     * @internal
     * @brief The amount of bytes that libsodium appendes before the actual message.
     * @ingroup apkenc
     */
    static const quint32 boxZeroBytes = crypto_box_ZEROBYTES;
};

}

#endif // AUTHEDPUBLICKEYENCRYPTION_HPP
